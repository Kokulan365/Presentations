# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - AzureMeetupHannover-2020-06-11/Services/*
    exclude:
      - AzureMeetupHannover-2020-06-11/DeployStateFile/*

stages:
  - stage: Build
    jobs:
      - job: Build

        pool:
          vmImage: "ubuntu-latest"

        steps:
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/AzureMeetupHannover-2020-06-11/TerraformModules"
              ArtifactName: "global"
              publishLocation: "Container"
            displayName: "Create Artifact for the TerraformModules Folder"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/AzureMeetupHannover-2020-06-11/Services"
              ArtifactName: "services"
              publishLocation: "Container"
            displayName: "Create Artifact for the Services Folder"

  - stage: Deploy
    dependsOn: Build
    condition: succeeded()

    jobs:
      - job: Deploy

        pool:
          vmImage: "ubuntu-latest"

        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "global"
              downloadPath: "$(System.DefaultWorkingDirectory)"
            displayName: "Download Azure TerraformModules Artifact"

          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "services"
              downloadPath: "$(System.DefaultWorkingDirectory)"
            displayName: "Download Azure Services Artifact"

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "0.12.25"
          
          - task: TerraformTaskV1@0
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/services/RecoveryServicesVault"
              backendServiceArm: "MSDN"
              backendAzureRmResourceGroupName: "meetup-rg"
              backendAzureRmStorageAccountName: "meetupterraformstate"
              backendAzureRmContainerName: "managementgovernance"
              backendAzureRmKey: "meetupbackupvault.tfstate"
            displayName: "Terrafom Init meetupbackupvault"

          - task: TerraformTaskV1@0
            inputs:
              provider: "azurerm"
              command: "validate"
              workingDirectory: "$(System.DefaultWorkingDirectory)/services/RecoveryServicesVault"
            displayName: "Terrafom Validate meetupbackupvault"

          - task: TerraformTaskV1@0
            inputs:
              provider: "azurerm"
              command: "plan"
              workingDirectory: "$(System.DefaultWorkingDirectory)/services/RecoveryServicesVault"
              commandOptions: "-out main.tfplan"
              environmentServiceNameAzureRM: "MSDN"
            displayName: "Terrafom plan meetupbackupvault"

          - task: TerraformTaskV1@0
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/services/RecoveryServicesVault"
              commandOptions: "main.tfplan"
              environmentServiceNameAzureRM: "MSDN"
            displayName: "Terrafom apply meetupbackupvault"
